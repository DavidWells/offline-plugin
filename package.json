{
  "_args": [
    [
      {
        "raw": "offline-plugin@git+https://github.com/MoOx/offline-plugin.git#phenomic",
        "scope": null,
        "escapedName": "offline-plugin",
        "name": "offline-plugin",
        "rawSpec": "git+https://github.com/MoOx/offline-plugin.git#phenomic",
        "spec": "git+https://github.com/MoOx/offline-plugin.git#phenomic",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:MoOx/offline-plugin.git#phenomic",
          "sshUrl": "git+ssh://git@github.com/MoOx/offline-plugin.git#phenomic",
          "httpsUrl": "git+https://github.com/MoOx/offline-plugin.git#phenomic",
          "gitUrl": "git://github.com/MoOx/offline-plugin.git#phenomic",
          "shortcut": "github:MoOx/offline-plugin#phenomic",
          "directUrl": "https://raw.githubusercontent.com/MoOx/offline-plugin/phenomic/package.json"
        }
      },
      "/Users/davidwells/Dropbox/Projects/davidwells.io/node_modules/phenomic"
    ]
  ],
  "_from": "git+https://github.com/MoOx/offline-plugin.git#phenomic",
  "_id": "offline-plugin@4.2.1",
  "_inCache": true,
  "_installable": true,
  "_location": "/offline-plugin",
  "_phantomChildren": {},
  "_requested": {
    "raw": "offline-plugin@git+https://github.com/MoOx/offline-plugin.git#phenomic",
    "scope": null,
    "escapedName": "offline-plugin",
    "name": "offline-plugin",
    "rawSpec": "git+https://github.com/MoOx/offline-plugin.git#phenomic",
    "spec": "git+https://github.com/MoOx/offline-plugin.git#phenomic",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:MoOx/offline-plugin.git#phenomic",
      "sshUrl": "git+ssh://git@github.com/MoOx/offline-plugin.git#phenomic",
      "httpsUrl": "git+https://github.com/MoOx/offline-plugin.git#phenomic",
      "gitUrl": "git://github.com/MoOx/offline-plugin.git#phenomic",
      "shortcut": "github:MoOx/offline-plugin#phenomic",
      "directUrl": "https://raw.githubusercontent.com/MoOx/offline-plugin/phenomic/package.json"
    }
  },
  "_requiredBy": [
    "/phenomic"
  ],
  "_resolved": "git+https://github.com/MoOx/offline-plugin.git#d0f95ff537f0fe4fe9b252ed5f351efd846cc02c",
  "_shasum": "754851c6024f4f30e71d02d85db691bc8e67238c",
  "_shrinkwrap": null,
  "_spec": "offline-plugin@git+https://github.com/MoOx/offline-plugin.git#phenomic",
  "_where": "/Users/davidwells/Dropbox/Projects/davidwells.io/node_modules/phenomic",
  "author": {
    "name": "Arthur Stolyar",
    "email": "nekr.fabula@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/NekR/offline-plugin/issues"
  },
  "dependencies": {
    "deep-extend": "^0.4.0",
    "ejs": "^2.3.4",
    "es6-promise": "^3.0.2",
    "loader-utils": "0.2.x",
    "minimatch": "^3.0.2"
  },
  "description": "offline-plugin for webpack",
  "devDependencies": {
    "babel": "^5.8.23",
    "dir-compare": "^1.1.0",
    "es6-promise": "^3.0.2",
    "on-build-webpack": "^0.1.0",
    "webpack": "^1.0.0"
  },
  "files": [
    "lib/",
    "tpls/",
    "runtime.js",
    "empty-entry.js"
  ],
  "gitHead": "d0f95ff537f0fe4fe9b252ed5f351efd846cc02c",
  "homepage": "https://github.com/NekR/offline-plugin",
  "keywords": [
    "webpack",
    "plugin",
    "offline",
    "cache",
    "service-worker",
    "serviceworker",
    "appcache",
    "application cache"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "name": "offline-plugin",
  "optionalDependencies": {},
  "readme": "# `offline-plugin` for webpack\n\n[![Join the chat at https://gitter.im/NekR/offline-plugin](https://badges.gitter.im/NekR/offline-plugin.svg)](https://gitter.im/NekR/offline-plugin?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nThis plugin is intended to provide offline experience for **webpack** projects. It uses **ServiceWorker** and **AppCache** as a fallback under the hood. Simply include this plugin in your ``webpack.config``, and the accompanying runtime in your client script, and your project will become offline ready by caching all (or some) output assets.\n\n## Install\n\n`npm install offline-plugin [--save-dev]`\n\n## Setup\n\nFirst, instantiate the plugin with [options](#options) in your `webpack.config`:\n\n```js\n// webpack.config.js example\n\nvar OfflinePlugin = require('offline-plugin');\n\nmodule.exports = {\n  // ...\n\n  plugins: [\n    // ... other plugins\n    // it always better if OfflinePlugin is the last plugin added\n    new OfflinePlugin()\n  ]\n  // ...\n}\n\n```\n\nThen, install the [runtime](#runtime) in your client script:\n\n```js\nrequire('offline-plugin/runtime').install();\n```\n\n## Docs\n\n* [Caches](docs/caches.md)\n* [Update process](docs/updates.md)\n\n## Options\n\n**All options are optional and `offline-plugin` could be used without specifying them.** Also see full list of default options [here](https://github.com/NekR/offline-plugin/blob/master/src/index.js#L9).\n\n#### `caches: 'all' | Object`\n\nTells to the plugin what to cache and how.\n\n* `'all'`: means that everything (all the webpack output assets) and URLs listed in `externals` option will be cached on install.\n* `Object`: Object with 3 possible `Array<string>` sections (properties): `main`, `additional`, `optional`. All sections are optional and by default are empty (no assets added).\n\n[More details about `caches`](docs/caches.md)\n\n> Default: `'all'`.\n\n#### `publicPath: string`\n\nSame as `publicPath` for `webpack` options, only difference is that absolute paths are not allowed  \n\n> __Example:__  \nCorrect value: `/project/`  \nIncorrect value: `https://example.com/project`\n\n#### `responseStrategy: 'cache-first' |Â 'network-first'`\nResponse strategy. Whether to use a cache or network first for responses.\n> Default: `'cache-first'`.\n\n#### `updateStrategy: 'changed' | 'all'`\nCache update strategy. [More details about `updateStrategy`](docs/update-strategies.md)  \n> Default: `'changed'`.\n\n#### `externals: Array<string>`.\nExplicitly marks the assets as _external_ assets that you can cache. If cache asset is not one of _webpack's generated assets_ and is not marked explicitly as _external_, you will receive warning about it into console. To cache external assets, add them to the `caches` object, by default `caches: 'all'` doesn't cache `externals`.\n\n> Default: `null`  \n> **Example value:** `['fonts/roboto.woff']`\n\n#### `excludes: Array<string | globs_pattern>`\nExcludes matches assets from being added to caches. Exclusion is performed before _rewrite_ happens.  \n[Learn more about assets _rewrite_](docs/rewrite.md)\n\n> Default: `['**/.*', '**/*.map']`  \n> _Excludes all files which start with `.` or end with `.map`_\n\n#### `relativePaths: boolean`\nWhen set to `true`, all cache asset paths are generated relatively to `ServiceWorker` file or `AppCache` folder respectively.  \n`publicPath` option is ignored when this is set to `true`.\n> **Default:** `true`\n\n#### `version: string | (plugin: OfflinePlugin) => void`\nVersion of the cache. Might be a function, useful in _watch-mode_ when you need to apply dynamic value.\n\n* `Function` is called with plugin instance as first argument\n* `string` can be interpolated with `[hash]` token\n\n> Default: _Current date_.\n\n#### `rewrites: Function | Object`\n\nRewrite function or rewrite map (`Object`). Useful when assets are served in a different way from the client perspective, e.g. usually `index.html` is served as `/`.\n\n[See more about `rewrites` option and default function](docs/rewrite.md)\n\n#### `ServiceWorker: Object | null | false`\n\nSettings for the `ServiceWorker` cache. Use `null` or `false` to disable `ServiceWorker` generation.\n\n* `output`: `string`. Relative (from the _webpack_'s config `output.path`) output path for emitted script.  \n_Default:_ `'sw.js'`.\n* `entry`: `string`. Relative or absolute path to file which will be used as `ServiceWorker` entry. Useful to implement additional function or handle other SW events.  \n_Default:_ _empty file_\n* `scope`: `string`. Reflects [ServiceWorker.register](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register)'s `scope` option.  \n_Default:_ `null`\n* `navigateFallbackURL`: `string`. The URL being returned from the caches when requested navigation URL isn't available. Similar to `AppCache.FALLBACK` option.  \n_Example:_ `navigateFallbackURL: '/'`\n* `events`: `boolean`. Enables runtime events for ServiceWorker. For supported events see `Runtime`'s `install()` options.\n_Default:_ `false`.\n\n#### `AppCache: Object | null | false`\n\nSettings for the `AppCache` cache. Use `null` or `false` to disable `AppCache` generation.\n\n* `NETWORK`: `string`. Reflects `AppCache`'s `NETWORK` section.  \n_Default:_ `'*'`.\n* `directory`: `string`. Relative (from the _webpack_'s config `output.path`) output directly path for the `AppCache` emitted files.  \n_Default:_ `'appcache/'`.\n* `events`: `boolean`. Enables runtime events for AppCache. For supported events see `Runtime`'s `install()` options.  \n_Default:_ `false`.\n* `FALLBACK`: `Object`. Reflects `AppCache`'s `FALLBACK` section. Useful for single page applications making use of HTML5 routing or for displaying custom _Offline page_.  \n_Example 1:_ `{ '/blog': '/' }` will map all requests starting with `/blog` to the domain roboto when request fails.  \n_Example 2:_ `{ '/': '/offline-page.html' }` will return contents of `/offline-page.html` for any failed request.  \n_Default:_ `null`.\n* `disableInstall` :`boolean`. disable the installation of the `AppCache` when calling to `require('offline-plugin/runtime').install();`. for example if you consume a `AppCache` from the `manifest` attribute in the `html` tag.\n_Default:_ `false`.\n\n## Runtime\n\nBesides plugin configuration, you also need to initialize it at runtime phase. It's done this way:\n\n```js\nrequire('offline-plugin/runtime').install();\n```\n\n### Methods\n\nRuntime has following methods:\n\n#### `install(options: Object)`\n\nStarts installation flow for `ServiceWorker`/`AppCache` it's safe and must be called each time your page loads (i.e. do not wrap it into any conditions).\n\n#### `applyUpdate()`\n\nUsed to apply update for existing installation. See `install` options below.\n\n### `install` Options\n\nRuntime `install` accepts 1 optional argument, `options` object. Right now you can use following runtime options:\n\n_**Note:** Events must be explicitly enabled for each tool (`ServiceWorker`/`AppCache`) in their options._\n\n#### `onInstalled`\n\nEvent called exactly once when `ServiceWorker` or `AppCache` is installed. Can be useful to display `\"App is ready for offline usage\"` message.\n\n#### `onUpdating`\n\n_Not supported for `AppCache`_\n\nEvent called when update is found and browsers started updating process. At this moment, some assets are downloading.\n\n#### `onUpdateReady`\n\nEvent called when `onUpdating` phase finished. All required assets are downloaded at this moment and are ready to be updated. Call `runtime.applyUpdate()` to apply update.\n\n#### `onUpdateFailed`\n\nEvent called when `upUpdating` phase failed by some reason. Nothing is downloaded at this moment and current update process in your code should be canceled or ignored.\n\n#### `onUpdated`\n\nEvent called when update is applied, either by calling `runtime.applyUpdate()` or some other way by a browser itself.\n\n\n## FAQ\n\n**Is it possible to minify `ServiceWorker` script output?**  \nYes, `offline-plugin` perfectly works with official `webpack.optimize.UglifyJsPlugin`, so if it's used your will get minified `ServiceWorker` script as well (no additional options required).\n\n**Is there a way to match assets with dynamic file names, like compilation hash or version?**  \nYes, it's possible with `pattern matching`, which is performed by [minimatch](https://www.npmjs.com/package/minimatch) library.  \nExample: ``main: ['index.html', 'scripts/main.*.js']``.\n\n\n## License\n\n[MIT](LICENSE.md)\n\n\n## CHANGELOG\n\n### 3.4.0\n\n* Added `ServiceWorker.navigateFallbackURL` option (see #71)\n* Added warning about development mode in `runtime.js` when used without `OfflinePlugin` in `webpack.config.js` (see #74)\n\n### 3.3.0\n\n* Fixed absolute URLs being prefixed with relative path when `relativePaths: true` is used ([#39](https://github.com/NekR/offline-plugin/issues/39), [#60](https://github.com/NekR/offline-plugin/issues/60))\n* Added `scope` option to ServiceWorker ([#19](https://github.com/NekR/offline-plugin/issues/19)). See [ServiceWorker.register](https://developer.mozilla.org/en-US/docs/Web/API/ServiceWorkerContainer/register) docs.\n\n### 3.0.0\n\n* All assets are now requested cache-bust query parameter (`__uncache=${ Date.now() }`)\n* Assets matching in caches now ignores search (query) path of URLs\n* Rename `scope` option to `publicPath` (`scope` is deprecated now and will produce warnings upon use)\n* Make `publicPath: ''` (empty string) by default\n* Make `relativePaths: true` by default\n* Cache sections `'additional'` and `'optional'` are now allowed only when `updateStrategy`option is set to `'changed'`\n* `changed` is now default `updateStrategy` and `hash` strategy is gone. `offline-plugin` now uses webpack's build hashes to apply `change` update strategy even when generate file names are the same. [Issue 6](https://github.com/NekR/offline-plugin/issues/6). More details about change in docs.\n* Any of `updateStrategy` is now using `version` option for its version tag\n* `version` now is not set by default and returns (when not set, e.g. default) compilation hash for `updateStrategy: 'changed'` and `version` for `updateStrategy: 'all'`\n* `version` now has interpolation value, use `[hash]` to insert compilation hash to your version string\n* `install()` method signature now is `install(options)` (callbacks are removed)\n* Runtime events are not implemented for ServiceWorker (and some for AppCache): `onUpdating`, `onUpdateReady`, `onUpdated`, `onInstalled`.  \n  Example: `runtime.install({ onInstalled: () => ... })`\n* Added `applyUpdate()` method to runtime\n* Absolute URLs can now be specified in `caches` as any other assets (they are required to be marked as `externals`)\n* Added basic test and Travis CI\n\n______________________________________________\n\nMore info in [CHANGELOG](CHANGELOG.md)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/NekR/offline-plugin.git"
  },
  "scripts": {
    "build": "babel src/ -d lib/",
    "test": "node tests/legacy/run",
    "watch": "npm run build -- --watch"
  },
  "version": "4.2.1"
}
